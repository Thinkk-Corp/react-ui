// vite.config.ts
import path from "node:path";
import react from "file:///D:/Yaz%C4%B1l%C4%B1m/THINKK/react-ui/node_modules/.pnpm/@vitejs+plugin-react@4.3.3_vite@5.4.11_@types+node@22.9.0_/node_modules/@vitejs/plugin-react/dist/index.mjs";
import { defineConfig } from "file:///D:/Yaz%C4%B1l%C4%B1m/THINKK/react-ui/node_modules/.pnpm/vite@5.4.11_@types+node@22.9.0/node_modules/vite/dist/node/index.js";
import dts from "file:///D:/Yaz%C4%B1l%C4%B1m/THINKK/react-ui/node_modules/.pnpm/vite-plugin-dts@4.3.0_@types+node@22.9.0_rollup@4.26.0_typescript@5.6.3_vite@5.4.11_@types+node@22.9.0_/node_modules/vite-plugin-dts/dist/index.mjs";

// package.json
var peerDependencies = {
  "@heroicons/react": "^2.1.5",
  "@remix-run/router": "^1.20.0",
  "@tailwindcss/typography": "^0.5.15",
  axios: "^1.7.3",
  "babel-plugin-react-compiler": "0.0.0-experimental-678214a-20241111",
  classnames: "^2.5.1",
  "eslint-plugin-react-compiler": "0.0.0-experimental-678214a-20241111",
  "framer-motion": "^11.0.10",
  i18next: "^23.12.2",
  "i18next-chained-backend": "^4.6.2",
  "i18next-fs-backend": "^2.3.2",
  "i18next-http-backend": "^2.6.1",
  "i18next-multiload-backend-adapter": "^2.3.0",
  "i18next-resources-to-backend": "^1.2.1",
  lodash: "^4.17.21",
  mitt: "^3.0.1",
  react: "19.0.0-rc-8b08e99e-20240713",
  "react-dom": "19.0.0-rc-8b08e99e-20240713",
  "react-error-boundary": "^4.1.2",
  "react-hook-form": "^7.53.1",
  "react-i18next": "^15.0.0",
  "react-router-dom": "^6.27.0",
  zustand: "^5.0.1"
};

// vite.config.ts
var ReactCompilerConfig = {
  /* ... */
};
var vite_config_default = defineConfig({
  build: {
    lib: {
      entry: "./src/index.ts",
      // Specifies the entry point for building the library.
      name: "react-ui",
      // Sets the name of the generated library.
      fileName: (format) => `index.${format}.js`,
      // Generates the output file name based on the format.
      formats: ["cjs", "es"]
      // Specifies the output formats (CommonJS and ES modules).
    },
    rollupOptions: {
      external: [...Object.keys(peerDependencies)]
      // Defines external dependencies for Rollup bundling.
    },
    sourcemap: true,
    // Generates source maps for debugging.
    emptyOutDir: true
  },
  resolve: {
    alias: [
      {
        find: /^~(.+)/,
        replacement: path.join(process.cwd(), "node_modules/$1")
      },
      {
        find: /^@\/(.+)/,
        replacement: path.join(process.cwd(), "src/$1")
      }
    ]
  },
  server: {
    port: 3e3
  },
  plugins: [
    react({
      babel: {
        plugins: [["babel-plugin-react-compiler", ReactCompilerConfig]]
      }
    }),
    dts()
  ]
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
